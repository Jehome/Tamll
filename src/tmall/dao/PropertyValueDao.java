package tmall.dao;import com.sun.corba.se.pept.transport.ConnectionCache;import org.junit.Test;import tmall.bean.Product;import tmall.bean.Property;import tmall.bean.PropertyValue;import tmall.util.DBUtil;import java.awt.*;import java.security.spec.PSSParameterSpec;import java.sql.*;import java.util.ArrayList;import java.util.List;/** * Created by 15001 on 2017/7/24. */public class PropertyValueDao {    public int getTotal() {        int total = 0;        try(Connection connection = DBUtil.getConnection(); Statement statement = connection.createStatement()) {            String sql = "SELECT COUNT (*) FROM propertyvalue";            ResultSet resultSet = statement.executeQuery(sql);            if(resultSet.next()) {                total = resultSet.getInt(1);            }        } catch (SQLException e) {            e.printStackTrace();        }        return total;    }    public void add(PropertyValue propertyValue) {        String sql = "INSERT INTO propertyvalue (pid, ptid, value) VALUES (?,?,?)";        try(Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS)) {            preparedStatement.setInt(1,propertyValue.getProduct().getId());            preparedStatement.setInt(2,propertyValue.getProperty().getId());            preparedStatement.setString(3,propertyValue.getValue());            preparedStatement.execute();            ResultSet resultSet = preparedStatement.getGeneratedKeys();            if(resultSet.next()){                int id = resultSet.getInt(1);                propertyValue.setId(id);            }        } catch (SQLException e) {            e.printStackTrace();        }    }    public void delete(int id) {        try(Connection connection = DBUtil.getConnection(); Statement statement = connection.createStatement()) {            String sql = "DELETE FROM propertyvalue WHERE id = "+id;            statement.execute(sql);        } catch (SQLException e) {            e.printStackTrace();        }    }    public void update(PropertyValue propertyValue) {        String sql = "UPDATE propertyvalue SET pid = ?,ptid = ?,value = ? WHERE id = ?";        try(Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1,propertyValue.getProduct().getId());            preparedStatement.setInt(2,propertyValue.getProperty().getId());            preparedStatement.setString(3,propertyValue.getValue());            preparedStatement.setInt(4,propertyValue.getId());            preparedStatement.execute();        } catch (SQLException e) {            e.printStackTrace();        }    }    public PropertyValue get(int id){        PropertyValue propertyValue = null;        try(Connection connection = DBUtil.getConnection();Statement statement = connection.createStatement()) {            String sql = "SELECT * FROM propertyvalue WHERE id = "+id;            ResultSet resultSet = statement.executeQuery(sql);            if(resultSet.next()){                Product product = new ProductDao().get(resultSet.getInt("pid"));                Property property = new PropertyDao().get(resultSet.getInt("ptid"));                String value = resultSet.getString("value");                propertyValue.setProperty(property);                propertyValue.setId(id);                propertyValue.setProduct(product);                propertyValue.setValue(value);            }        } catch (SQLException e) {            e.printStackTrace();        }        return  propertyValue;    }    public PropertyValue get(int pid,int ptid){        PropertyValue propertyValue = null;        try(Connection connection = DBUtil.getConnection();Statement statement = connection.createStatement()) {            String sql = "SELECT * FROM propertyvalue WHERE pid = "+pid+"ptid ="+ptid;            ResultSet resultSet = statement.executeQuery(sql);            if(resultSet.next()){                Product product = new ProductDao().get(pid);                Property property = new PropertyDao().get(ptid);                String value = resultSet.getString("value");                int id = resultSet.getInt("id");                propertyValue.setProperty(property);                propertyValue.setId(id);                propertyValue.setProduct(product);                propertyValue.setValue(value);            }        } catch (SQLException e) {            e.printStackTrace();        }        return  propertyValue;    }    public List<PropertyValue> list(int begin,int size) {        List<PropertyValue> lists = new ArrayList<>();        String sql = "SELECT * FROM propertyvalue ORDER BY id DESC LIMIT ?,?";        try(Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1,begin);            preparedStatement.setInt(2,size);            ResultSet resultSet = preparedStatement.executeQuery();            while(resultSet.next()) {                PropertyValue propertyValue = new PropertyValue();                int pid = resultSet.getInt("pid");                int ptid = resultSet.getInt("ptid");                int id = resultSet.getInt("id");                String value = resultSet.getString("value");                Product product = new ProductDao().get(pid);                Property property = new PropertyDao().get(ptid);                propertyValue.setValue(value);                propertyValue.setProduct(product);                propertyValue.setId(id);                propertyValue.setProperty(property);                lists.add(propertyValue);            }        } catch (SQLException e) {            e.printStackTrace();        }        return lists;    }    public List<PropertyValue> list() {        return list(0,Short.MAX_VALUE);    }    public List<PropertyValue> list(int pid) {        List<PropertyValue> list = new ArrayList<>();        Product product = new ProductDao().get(pid);        String sql = "SELECT * FROM propertyvalue WHERE pid = ? ORDER BY ptid DESC ";        try(Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1,pid);            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                PropertyValue propertyValue = new PropertyValue();                int id = resultSet.getInt("id");                String value = resultSet.getString("value");                Property property = new PropertyDao().get(resultSet.getInt("ptid"));                propertyValue.setProperty(property);                propertyValue.setId(id);                propertyValue.setValue(value);                propertyValue.setProduct(product);                list.add(propertyValue);            }        } catch (SQLException e) {            e.printStackTrace();        }        return list;    }    public void init(Product product) {        List<Property> list = new PropertyDao().list(product.getCategory().getId());        for(Property property :list){            PropertyValue propertyValue = get(product.getId(),property.getId());            if( propertyValue == null){                propertyValue  = new PropertyValue();                propertyValue.setProduct(product);                propertyValue.setProperty(property);                this.add(propertyValue);            }        }    }}